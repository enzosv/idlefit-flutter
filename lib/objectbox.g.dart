// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'game/coin_generator.dart';
import 'game/currency.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8970713413303252018),
      name: 'Currency',
      lastPropertyId: const obx_int.IdUid(6, 4916751470591575964),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 411610756409811407),
            name: 'count',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2153748619588745951),
            name: 'totalSpent',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4769501277755131512),
            name: 'totalEarned',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4916751470591575964),
            name: 'id',
            type: 6,
            flags: 129)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 7897766162698443189),
      name: 'CoinGenerator',
      lastPropertyId: const obx_int.IdUid(4, 3181080062182307300),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8997851123245017231),
            name: 'count',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5801636019966271860),
            name: 'level',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3181080062182307300),
            name: 'tier',
            type: 6,
            flags: 129)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 7897766162698443189),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [2493137042954685248],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        1612088624750524307,
        1221735629759989076,
        7739014744985074402,
        2465340859862322629,
        2427394359739034951,
        3598368693352972001,
        3238954471475910745
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Currency: obx_int.EntityDefinition<Currency>(
        model: _entities[0],
        toOneRelations: (Currency object) => [],
        toManyRelations: (Currency object) => {},
        getId: (Currency object) => object.id,
        setId: (Currency object, int id) {
          object.id = id;
        },
        objectToFB: (Currency object, fb.Builder fbb) {
          fbb.startTable(7);
          fbb.addFloat64(1, object.count);
          fbb.addFloat64(2, object.totalSpent);
          fbb.addFloat64(3, object.totalEarned);
          fbb.addInt64(5, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final countParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = Currency(id: idParam, count: countParam)
            ..totalSpent =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..totalEarned =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);

          return object;
        }),
    CoinGenerator: obx_int.EntityDefinition<CoinGenerator>(
        model: _entities[1],
        toOneRelations: (CoinGenerator object) => [],
        toManyRelations: (CoinGenerator object) => {},
        getId: (CoinGenerator object) => object.tier,
        setId: (CoinGenerator object, int id) {
          object.tier = id;
        },
        objectToFB: (CoinGenerator object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(1, object.count);
          fbb.addInt64(2, object.level);
          fbb.addInt64(3, object.tier);
          fbb.finish(fbb.endTable());
          return object.tier;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final tierParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = CoinGenerator(tier: tierParam)
            ..count = const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..level =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Currency] entity fields to define ObjectBox queries.
class Currency_ {
  /// See [Currency.count].
  static final count =
      obx.QueryDoubleProperty<Currency>(_entities[0].properties[0]);

  /// See [Currency.totalSpent].
  static final totalSpent =
      obx.QueryDoubleProperty<Currency>(_entities[0].properties[1]);

  /// See [Currency.totalEarned].
  static final totalEarned =
      obx.QueryDoubleProperty<Currency>(_entities[0].properties[2]);

  /// See [Currency.id].
  static final id =
      obx.QueryIntegerProperty<Currency>(_entities[0].properties[3]);
}

/// [CoinGenerator] entity fields to define ObjectBox queries.
class CoinGenerator_ {
  /// See [CoinGenerator.count].
  static final count =
      obx.QueryIntegerProperty<CoinGenerator>(_entities[1].properties[0]);

  /// See [CoinGenerator.level].
  static final level =
      obx.QueryIntegerProperty<CoinGenerator>(_entities[1].properties[1]);

  /// See [CoinGenerator.tier].
  static final tier =
      obx.QueryIntegerProperty<CoinGenerator>(_entities[1].properties[2]);
}
