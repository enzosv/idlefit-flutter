// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'models/achievement.dart';
import 'models/coin_generator.dart';
import 'models/currency.dart';
import 'models/daily_quest.dart';
import 'models/game_stats.dart';
import 'models/health_data_entry.dart';
import 'models/shop_items.dart';
import 'models/time_based_stats.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8970713413303252018),
      name: 'Currency',
      lastPropertyId: const obx_int.IdUid(9, 1103942004918786733),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 411610756409811407),
            name: 'count',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2153748619588745951),
            name: 'totalSpent',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4769501277755131512),
            name: 'totalEarned',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4916751470591575964),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6709896111414846563),
            name: 'baseMax',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1103942004918786733),
            name: 'maxMultiplier',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 7897766162698443189),
      name: 'CoinGenerator',
      lastPropertyId: const obx_int.IdUid(5, 2457321709930163773),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8997851123245017231),
            name: 'count',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5801636019966271860),
            name: 'level',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3181080062182307300),
            name: 'tier',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2457321709930163773),
            name: 'isUnlocked',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 604859576841525103),
      name: 'HealthDataEntry',
      lastPropertyId: const obx_int.IdUid(6, 5977650328934603192),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4745966459735341277),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 81048633074782967),
            name: 'timestamp',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(2, 6046711262050609894)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7708077465627102502),
            name: 'duration',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4892005414219992245),
            name: 'recordedAt',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6816389771923756793),
            name: 'value',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5977650328934603192),
            name: 'type',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 3093373672220765882),
      name: 'ShopItem',
      lastPropertyId: const obx_int.IdUid(8, 2249982543274755836),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 677716417256338725),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2249982543274755836),
            name: 'level',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 2119159745219438621),
      name: 'Achievement',
      lastPropertyId: const obx_int.IdUid(13, 5316489849535110872),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 37781412133150881),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2084831577797524984),
            name: 'dateClaimed',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6913876187873743667),
            name: 'action',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 759831562113825008),
            name: 'reqUnit',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 5316489849535110872),
            name: 'requirement',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 8235573318783332755),
      name: 'DailyQuest',
      lastPropertyId: const obx_int.IdUid(10, 6172183544316569837),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9183427040770090315),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4000991215743677351),
            name: 'action',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2450008997855178603),
            name: 'unit',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7085483785093773366),
            name: 'requirement',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5366385903808278580),
            name: 'reward',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4743794405710996085),
            name: 'rewardUnit',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2032882936729661744),
            name: 'progress',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3449366289436579614),
            name: 'dateAssigned',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6172183544316569837),
            name: 'isClaimed',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 1588013501194416749),
      name: 'GameStats',
      lastPropertyId: const obx_int.IdUid(13, 7296285796363016621),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8697241391330884971),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2758381798066180555),
            name: 'manualGeneratorClicks',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 154869777890141793),
            name: 'adViewCount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6758404124329333231),
            name: 'generatorsPurchased',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2087693039694509539),
            name: 'generatorsUpgraded',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7543791878837527894),
            name: 'generatorsUnlocked',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8087535931801760927),
            name: 'shopItemsUpgraded',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 739869056003070641),
            name: 'passiveCoinsEarned',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4705106008358792521),
            name: 'manualCoinsEarned',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3163768500728714628),
            name: 'totalSteps',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2414146639738611978),
            name: 'totalCalories',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7576599265764459971),
            name: 'totalExerciseMinutes',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 7296285796363016621),
            name: 'lastUpdated',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 7327726906271346529),
      name: 'TimeBasedStats',
      lastPropertyId: const obx_int.IdUid(18, 1468966932796771532),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7746616640701635476),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7383292175966780055),
            name: 'periodStartTimestamp',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8557594743992621667),
            name: 'periodEndTimestamp',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3122682277122896448),
            name: 'periodKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4724378341981398817),
            name: 'manualGeneratorClicks',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6146907053485470455),
            name: 'adViewCount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6217047593390484033),
            name: 'generatorsPurchased',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3197426091773101043),
            name: 'generatorsUpgraded',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3025770359063079675),
            name: 'generatorsUnlocked',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4724867458922212752),
            name: 'shopItemsUpgraded',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5551018493935491489),
            name: 'passiveCoinsEarned',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1056790647359864320),
            name: 'manualCoinsEarned',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 3486308850104237892),
            name: 'steps',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 396837687818858442),
            name: 'calories',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 2263266724579161909),
            name: 'exerciseMinutes',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 3966315334491907743),
            name: 'lastUpdated',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 1468966932796771532),
            name: 'periodTypeIndex',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(10, 7327726906271346529),
      lastIndexId: const obx_int.IdUid(2, 6046711262050609894),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [2493137042954685248, 219102169117428336],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        1612088624750524307,
        1221735629759989076,
        7739014744985074402,
        2465340859862322629,
        2427394359739034951,
        3598368693352972001,
        3238954471475910745,
        7990707600546979225,
        8940347419837491692,
        7308206853943299864,
        1298175783779309702,
        5086729266335392220,
        5407859144525862516,
        4297493175054291291,
        944104226892207343,
        2037289546189049172,
        2255176740307486357,
        745509794462133064,
        6946102241664551198,
        5678817004169731437,
        167161125635220021,
        4278904461843222799,
        4060410116606726424,
        5122690587257086689,
        7633385983348480139,
        5727768307727832225,
        2592235923790219212,
        2545780716478496970,
        3672730041291203090
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Currency: obx_int.EntityDefinition<Currency>(
        model: _entities[0],
        toOneRelations: (Currency object) => [],
        toManyRelations: (Currency object) => {},
        getId: (Currency object) => object.id,
        setId: (Currency object, int id) {
          object.id = id;
        },
        objectToFB: (Currency object, fb.Builder fbb) {
          fbb.startTable(10);
          fbb.addFloat64(1, object.count);
          fbb.addFloat64(2, object.totalSpent);
          fbb.addFloat64(3, object.totalEarned);
          fbb.addInt64(5, object.id);
          fbb.addFloat64(7, object.baseMax);
          fbb.addFloat64(8, object.maxMultiplier);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final countParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final baseMaxParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final object = Currency(
              id: idParam, count: countParam, baseMax: baseMaxParam)
            ..totalSpent =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..totalEarned =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..maxMultiplier =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);

          return object;
        }),
    CoinGenerator: obx_int.EntityDefinition<CoinGenerator>(
        model: _entities[1],
        toOneRelations: (CoinGenerator object) => [],
        toManyRelations: (CoinGenerator object) => {},
        getId: (CoinGenerator object) => object.tier,
        setId: (CoinGenerator object, int id) {
          object.tier = id;
        },
        objectToFB: (CoinGenerator object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(1, object.count);
          fbb.addInt64(2, object.level);
          fbb.addInt64(3, object.tier);
          fbb.addBool(4, object.isUnlocked);
          fbb.finish(fbb.endTable());
          return object.tier;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final tierParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = CoinGenerator(tier: tierParam)
            ..count = const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..level = const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..isUnlocked =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);

          return object;
        }),
    HealthDataEntry: obx_int.EntityDefinition<HealthDataEntry>(
        model: _entities[2],
        toOneRelations: (HealthDataEntry object) => [],
        toManyRelations: (HealthDataEntry object) => {},
        getId: (HealthDataEntry object) => object.id,
        setId: (HealthDataEntry object, int id) {
          object.id = id;
        },
        objectToFB: (HealthDataEntry object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.timestamp);
          fbb.addInt64(2, object.duration);
          fbb.addInt64(3, object.recordedAt);
          fbb.addFloat64(4, object.value);
          fbb.addOffset(5, typeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final timestampParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final durationParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final valueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final recordedAtParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = HealthDataEntry(
              timestamp: timestampParam,
              duration: durationParam,
              value: valueParam,
              type: typeParam,
              recordedAt: recordedAtParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    ShopItem: obx_int.EntityDefinition<ShopItem>(
        model: _entities[3],
        toOneRelations: (ShopItem object) => [],
        toManyRelations: (ShopItem object) => {},
        getId: (ShopItem object) => object.id,
        setId: (ShopItem object, int id) {
          object.id = id;
        },
        objectToFB: (ShopItem object, fb.Builder fbb) {
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(7, object.level);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final levelParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final object = ShopItem(id: idParam, level: levelParam);

          return object;
        }),
    Achievement: obx_int.EntityDefinition<Achievement>(
        model: _entities[4],
        toOneRelations: (Achievement object) => [],
        toManyRelations: (Achievement object) => {},
        getId: (Achievement object) => object.id,
        setId: (Achievement object, int id) {
          object.id = id;
        },
        objectToFB: (Achievement object, fb.Builder fbb) {
          final actionOffset = fbb.writeString(object.action);
          final reqUnitOffset = fbb.writeString(object.reqUnit);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(9, object.dateClaimed);
          fbb.addOffset(10, actionOffset);
          fbb.addOffset(11, reqUnitOffset);
          fbb.addInt64(12, object.requirement);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Achievement()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..dateClaimed =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22)
            ..action = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 24, '')
            ..reqUnit = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 26, '')
            ..requirement =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);

          return object;
        }),
    DailyQuest: obx_int.EntityDefinition<DailyQuest>(
        model: _entities[5],
        toOneRelations: (DailyQuest object) => [],
        toManyRelations: (DailyQuest object) => {},
        getId: (DailyQuest object) => object.id,
        setId: (DailyQuest object, int id) {
          object.id = id;
        },
        objectToFB: (DailyQuest object, fb.Builder fbb) {
          final actionOffset = fbb.writeString(object.action);
          final unitOffset = fbb.writeString(object.unit);
          final rewardUnitOffset = fbb.writeString(object.rewardUnit);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, actionOffset);
          fbb.addOffset(2, unitOffset);
          fbb.addInt64(3, object.requirement);
          fbb.addInt64(4, object.reward);
          fbb.addOffset(5, rewardUnitOffset);
          fbb.addFloat64(6, object.progress);
          fbb.addInt64(7, object.dateAssigned);
          fbb.addBool(9, object.isClaimed);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DailyQuest()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..action = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..unit = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..requirement =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..reward =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..rewardUnit = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..progress =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..dateAssigned =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..isClaimed =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);

          return object;
        }),
    GameStats: obx_int.EntityDefinition<GameStats>(
        model: _entities[6],
        toOneRelations: (GameStats object) => [],
        toManyRelations: (GameStats object) => {},
        getId: (GameStats object) => object.id,
        setId: (GameStats object, int id) {
          object.id = id;
        },
        objectToFB: (GameStats object, fb.Builder fbb) {
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.manualGeneratorClicks);
          fbb.addInt64(2, object.adViewCount);
          fbb.addInt64(3, object.generatorsPurchased);
          fbb.addInt64(4, object.generatorsUpgraded);
          fbb.addInt64(5, object.generatorsUnlocked);
          fbb.addInt64(6, object.shopItemsUpgraded);
          fbb.addFloat64(7, object.passiveCoinsEarned);
          fbb.addFloat64(8, object.manualCoinsEarned);
          fbb.addFloat64(9, object.totalSteps);
          fbb.addFloat64(10, object.totalCalories);
          fbb.addFloat64(11, object.totalExerciseMinutes);
          fbb.addInt64(12, object.lastUpdated);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = GameStats()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..manualGeneratorClicks =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..adViewCount =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..generatorsPurchased =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..generatorsUpgraded =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..generatorsUnlocked =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..shopItemsUpgraded =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..passiveCoinsEarned =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..manualCoinsEarned =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0)
            ..totalSteps =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0)
            ..totalCalories =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0)
            ..totalExerciseMinutes =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0)
            ..lastUpdated =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);

          return object;
        }),
    TimeBasedStats: obx_int.EntityDefinition<TimeBasedStats>(
        model: _entities[7],
        toOneRelations: (TimeBasedStats object) => [],
        toManyRelations: (TimeBasedStats object) => {},
        getId: (TimeBasedStats object) => object.id,
        setId: (TimeBasedStats object, int id) {
          object.id = id;
        },
        objectToFB: (TimeBasedStats object, fb.Builder fbb) {
          final periodKeyOffset = fbb.writeString(object.periodKey);
          fbb.startTable(19);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.periodStartTimestamp);
          fbb.addInt64(2, object.periodEndTimestamp);
          fbb.addOffset(4, periodKeyOffset);
          fbb.addInt64(5, object.manualGeneratorClicks);
          fbb.addInt64(6, object.adViewCount);
          fbb.addInt64(7, object.generatorsPurchased);
          fbb.addInt64(8, object.generatorsUpgraded);
          fbb.addInt64(9, object.generatorsUnlocked);
          fbb.addInt64(10, object.shopItemsUpgraded);
          fbb.addFloat64(11, object.passiveCoinsEarned);
          fbb.addFloat64(12, object.manualCoinsEarned);
          fbb.addFloat64(13, object.steps);
          fbb.addFloat64(14, object.calories);
          fbb.addFloat64(15, object.exerciseMinutes);
          fbb.addInt64(16, object.lastUpdated);
          fbb.addInt64(17, object.periodTypeIndex);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final periodStartTimestampParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final periodEndTimestampParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final periodKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final periodTypeIndexParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0);
          final object = TimeBasedStats(
              periodStartTimestamp: periodStartTimestampParam,
              periodEndTimestamp: periodEndTimestampParam,
              periodKey: periodKeyParam,
              periodTypeIndex: periodTypeIndexParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..manualGeneratorClicks =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..adViewCount =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..generatorsPurchased =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..generatorsUpgraded =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)
            ..generatorsUnlocked =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0)
            ..shopItemsUpgraded =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0)
            ..passiveCoinsEarned =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0)
            ..manualCoinsEarned =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 28, 0)
            ..steps =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 30, 0)
            ..calories =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 32, 0)
            ..exerciseMinutes =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 34, 0)
            ..lastUpdated =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Currency] entity fields to define ObjectBox queries.
class Currency_ {
  /// See [Currency.count].
  static final count =
      obx.QueryDoubleProperty<Currency>(_entities[0].properties[0]);

  /// See [Currency.totalSpent].
  static final totalSpent =
      obx.QueryDoubleProperty<Currency>(_entities[0].properties[1]);

  /// See [Currency.totalEarned].
  static final totalEarned =
      obx.QueryDoubleProperty<Currency>(_entities[0].properties[2]);

  /// See [Currency.id].
  static final id =
      obx.QueryIntegerProperty<Currency>(_entities[0].properties[3]);

  /// See [Currency.baseMax].
  static final baseMax =
      obx.QueryDoubleProperty<Currency>(_entities[0].properties[4]);

  /// See [Currency.maxMultiplier].
  static final maxMultiplier =
      obx.QueryDoubleProperty<Currency>(_entities[0].properties[5]);
}

/// [CoinGenerator] entity fields to define ObjectBox queries.
class CoinGenerator_ {
  /// See [CoinGenerator.count].
  static final count =
      obx.QueryIntegerProperty<CoinGenerator>(_entities[1].properties[0]);

  /// See [CoinGenerator.level].
  static final level =
      obx.QueryIntegerProperty<CoinGenerator>(_entities[1].properties[1]);

  /// See [CoinGenerator.tier].
  static final tier =
      obx.QueryIntegerProperty<CoinGenerator>(_entities[1].properties[2]);

  /// See [CoinGenerator.isUnlocked].
  static final isUnlocked =
      obx.QueryBooleanProperty<CoinGenerator>(_entities[1].properties[3]);
}

/// [HealthDataEntry] entity fields to define ObjectBox queries.
class HealthDataEntry_ {
  /// See [HealthDataEntry.id].
  static final id =
      obx.QueryIntegerProperty<HealthDataEntry>(_entities[2].properties[0]);

  /// See [HealthDataEntry.timestamp].
  static final timestamp =
      obx.QueryIntegerProperty<HealthDataEntry>(_entities[2].properties[1]);

  /// See [HealthDataEntry.duration].
  static final duration =
      obx.QueryIntegerProperty<HealthDataEntry>(_entities[2].properties[2]);

  /// See [HealthDataEntry.recordedAt].
  static final recordedAt =
      obx.QueryIntegerProperty<HealthDataEntry>(_entities[2].properties[3]);

  /// See [HealthDataEntry.value].
  static final value =
      obx.QueryDoubleProperty<HealthDataEntry>(_entities[2].properties[4]);

  /// See [HealthDataEntry.type].
  static final type =
      obx.QueryStringProperty<HealthDataEntry>(_entities[2].properties[5]);
}

/// [ShopItem] entity fields to define ObjectBox queries.
class ShopItem_ {
  /// See [ShopItem.id].
  static final id =
      obx.QueryIntegerProperty<ShopItem>(_entities[3].properties[0]);

  /// See [ShopItem.level].
  static final level =
      obx.QueryIntegerProperty<ShopItem>(_entities[3].properties[1]);
}

/// [Achievement] entity fields to define ObjectBox queries.
class Achievement_ {
  /// See [Achievement.id].
  static final id =
      obx.QueryIntegerProperty<Achievement>(_entities[4].properties[0]);

  /// See [Achievement.dateClaimed].
  static final dateClaimed =
      obx.QueryIntegerProperty<Achievement>(_entities[4].properties[1]);

  /// See [Achievement.action].
  static final action =
      obx.QueryStringProperty<Achievement>(_entities[4].properties[2]);

  /// See [Achievement.reqUnit].
  static final reqUnit =
      obx.QueryStringProperty<Achievement>(_entities[4].properties[3]);

  /// See [Achievement.requirement].
  static final requirement =
      obx.QueryIntegerProperty<Achievement>(_entities[4].properties[4]);
}

/// [DailyQuest] entity fields to define ObjectBox queries.
class DailyQuest_ {
  /// See [DailyQuest.id].
  static final id =
      obx.QueryIntegerProperty<DailyQuest>(_entities[5].properties[0]);

  /// See [DailyQuest.action].
  static final action =
      obx.QueryStringProperty<DailyQuest>(_entities[5].properties[1]);

  /// See [DailyQuest.unit].
  static final unit =
      obx.QueryStringProperty<DailyQuest>(_entities[5].properties[2]);

  /// See [DailyQuest.requirement].
  static final requirement =
      obx.QueryIntegerProperty<DailyQuest>(_entities[5].properties[3]);

  /// See [DailyQuest.reward].
  static final reward =
      obx.QueryIntegerProperty<DailyQuest>(_entities[5].properties[4]);

  /// See [DailyQuest.rewardUnit].
  static final rewardUnit =
      obx.QueryStringProperty<DailyQuest>(_entities[5].properties[5]);

  /// See [DailyQuest.progress].
  static final progress =
      obx.QueryDoubleProperty<DailyQuest>(_entities[5].properties[6]);

  /// See [DailyQuest.dateAssigned].
  static final dateAssigned =
      obx.QueryIntegerProperty<DailyQuest>(_entities[5].properties[7]);

  /// See [DailyQuest.isClaimed].
  static final isClaimed =
      obx.QueryBooleanProperty<DailyQuest>(_entities[5].properties[8]);
}

/// [GameStats] entity fields to define ObjectBox queries.
class GameStats_ {
  /// See [GameStats.id].
  static final id =
      obx.QueryIntegerProperty<GameStats>(_entities[6].properties[0]);

  /// See [GameStats.manualGeneratorClicks].
  static final manualGeneratorClicks =
      obx.QueryIntegerProperty<GameStats>(_entities[6].properties[1]);

  /// See [GameStats.adViewCount].
  static final adViewCount =
      obx.QueryIntegerProperty<GameStats>(_entities[6].properties[2]);

  /// See [GameStats.generatorsPurchased].
  static final generatorsPurchased =
      obx.QueryIntegerProperty<GameStats>(_entities[6].properties[3]);

  /// See [GameStats.generatorsUpgraded].
  static final generatorsUpgraded =
      obx.QueryIntegerProperty<GameStats>(_entities[6].properties[4]);

  /// See [GameStats.generatorsUnlocked].
  static final generatorsUnlocked =
      obx.QueryIntegerProperty<GameStats>(_entities[6].properties[5]);

  /// See [GameStats.shopItemsUpgraded].
  static final shopItemsUpgraded =
      obx.QueryIntegerProperty<GameStats>(_entities[6].properties[6]);

  /// See [GameStats.passiveCoinsEarned].
  static final passiveCoinsEarned =
      obx.QueryDoubleProperty<GameStats>(_entities[6].properties[7]);

  /// See [GameStats.manualCoinsEarned].
  static final manualCoinsEarned =
      obx.QueryDoubleProperty<GameStats>(_entities[6].properties[8]);

  /// See [GameStats.totalSteps].
  static final totalSteps =
      obx.QueryDoubleProperty<GameStats>(_entities[6].properties[9]);

  /// See [GameStats.totalCalories].
  static final totalCalories =
      obx.QueryDoubleProperty<GameStats>(_entities[6].properties[10]);

  /// See [GameStats.totalExerciseMinutes].
  static final totalExerciseMinutes =
      obx.QueryDoubleProperty<GameStats>(_entities[6].properties[11]);

  /// See [GameStats.lastUpdated].
  static final lastUpdated =
      obx.QueryIntegerProperty<GameStats>(_entities[6].properties[12]);
}

/// [TimeBasedStats] entity fields to define ObjectBox queries.
class TimeBasedStats_ {
  /// See [TimeBasedStats.id].
  static final id =
      obx.QueryIntegerProperty<TimeBasedStats>(_entities[7].properties[0]);

  /// See [TimeBasedStats.periodStartTimestamp].
  static final periodStartTimestamp =
      obx.QueryIntegerProperty<TimeBasedStats>(_entities[7].properties[1]);

  /// See [TimeBasedStats.periodEndTimestamp].
  static final periodEndTimestamp =
      obx.QueryIntegerProperty<TimeBasedStats>(_entities[7].properties[2]);

  /// See [TimeBasedStats.periodKey].
  static final periodKey =
      obx.QueryStringProperty<TimeBasedStats>(_entities[7].properties[3]);

  /// See [TimeBasedStats.manualGeneratorClicks].
  static final manualGeneratorClicks =
      obx.QueryIntegerProperty<TimeBasedStats>(_entities[7].properties[4]);

  /// See [TimeBasedStats.adViewCount].
  static final adViewCount =
      obx.QueryIntegerProperty<TimeBasedStats>(_entities[7].properties[5]);

  /// See [TimeBasedStats.generatorsPurchased].
  static final generatorsPurchased =
      obx.QueryIntegerProperty<TimeBasedStats>(_entities[7].properties[6]);

  /// See [TimeBasedStats.generatorsUpgraded].
  static final generatorsUpgraded =
      obx.QueryIntegerProperty<TimeBasedStats>(_entities[7].properties[7]);

  /// See [TimeBasedStats.generatorsUnlocked].
  static final generatorsUnlocked =
      obx.QueryIntegerProperty<TimeBasedStats>(_entities[7].properties[8]);

  /// See [TimeBasedStats.shopItemsUpgraded].
  static final shopItemsUpgraded =
      obx.QueryIntegerProperty<TimeBasedStats>(_entities[7].properties[9]);

  /// See [TimeBasedStats.passiveCoinsEarned].
  static final passiveCoinsEarned =
      obx.QueryDoubleProperty<TimeBasedStats>(_entities[7].properties[10]);

  /// See [TimeBasedStats.manualCoinsEarned].
  static final manualCoinsEarned =
      obx.QueryDoubleProperty<TimeBasedStats>(_entities[7].properties[11]);

  /// See [TimeBasedStats.steps].
  static final steps =
      obx.QueryDoubleProperty<TimeBasedStats>(_entities[7].properties[12]);

  /// See [TimeBasedStats.calories].
  static final calories =
      obx.QueryDoubleProperty<TimeBasedStats>(_entities[7].properties[13]);

  /// See [TimeBasedStats.exerciseMinutes].
  static final exerciseMinutes =
      obx.QueryDoubleProperty<TimeBasedStats>(_entities[7].properties[14]);

  /// See [TimeBasedStats.lastUpdated].
  static final lastUpdated =
      obx.QueryIntegerProperty<TimeBasedStats>(_entities[7].properties[15]);

  /// See [TimeBasedStats.periodTypeIndex].
  static final periodTypeIndex =
      obx.QueryIntegerProperty<TimeBasedStats>(_entities[7].properties[16]);
}
